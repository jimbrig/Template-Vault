/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var http = require('http');
var url = require('url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
var url__default = /*#__PURE__*/_interopDefaultLegacy(url);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const ALLOWED_HEADERS = 'Access-Control-Allow-Headers, Origin, Authorization,Accept,x-client-id, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, hypothesis-client-version';
const mimeType = {
    '.ico': 'image/x-icon',
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.json': 'application/json',
    '.css': 'text/css',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.wav': 'audio/wav',
    '.mp3': 'audio/mpeg',
    '.svg': 'image/svg+xml',
    '.pdf': 'application/pdf',
    '.zip': 'application/zip',
    '.doc': 'application/msword',
    '.eot': 'application/vnd.ms-fontobject',
    '.ttf': 'application/x-font-ttf'
};

function toBuffer(ab) {
    const buf = Buffer.alloc(ab.byteLength);
    const view = new Uint8Array(ab);
    for (let i = 0; i < buf.length; ++i) {
        buf[i] = view[i];
    }
    return buf;
}
const exp = (folder, port, plugin) => {
    const fileBufferCache = new Map();
    const app = plugin.app;
    console.log('Creating server', folder, port);
    const server = http__default['default'].createServer(function (req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, HEAD, POST, OPTIONS, PUT, PATCH, DELETE');
            res.setHeader('Access-Control-Allow-Headers', ALLOWED_HEADERS);
            res.setHeader('Access-Control-Allow-Credentials', 'true');
            try {
                // parse URL
                const parsedUrl = url__default['default'].parse(req.url);
                const fullPath = obsidian.normalizePath(folder + parsedUrl.pathname);
                const abstractPath = app.vault.getAbstractFileByPath(fullPath);
                if (abstractPath === null || !(abstractPath instanceof obsidian.TFile)) {
                    res.statusCode = 404;
                    res.end(`File ${fullPath} is not a file!`);
                    return;
                }
                let fileBuffer = null;
                if (fileBufferCache.has(fullPath) && fileBufferCache.get(fullPath).mtime == abstractPath.stat.mtime) {
                    fileBuffer = fileBufferCache.get(fullPath).buf;
                }
                else {
                    const file = yield app.vault.readBinary(abstractPath);
                    if (!file) {
                        // if the file is not found, return 404
                        res.statusCode = 404;
                        res.end(`File ${fullPath} not found!`);
                        return;
                    }
                    fileBuffer = toBuffer(file);
                    fileBufferCache.set(fullPath, { mtime: abstractPath.stat.mtime, buf: fileBuffer });
                }
                const ext = '.' + abstractPath.extension;
                // if the file is found, set Content-type and send data
                res.setHeader('Content-type', mimeType[ext] || 'text/plain');
                res.end(fileBuffer);
            }
            catch (e) {
                res.statusCode = 500;
                res.end(`Error getting the file: ${e}.`);
            }
        });
    });
    return {
        listen() {
            server.listen(port);
        },
        close() {
            server.close();
        }
    };
};

const DEFAULT_SETTINGS = {
    vaultMaps: {}
};
const isValidPort = (port) => Number(port) && 0 <= Number(port) && Number(port) <= 65535;
class StaticFileServerPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.webservers = [];
            yield this.loadSettings();
            this.restartServers();
            this.addSettingTab(new SettingTab(this.app, this));
        });
    }
    shutDownServers() {
        this.webservers.forEach(s => s.close());
        this.webservers = [];
    }
    restartServers() {
        this.shutDownServers();
        for (const [port, path] of Object.entries(this.settings.vaultMaps)) {
            if (!isValidPort(port)) {
                new obsidian.Notice(`Static File Server Plugin: Invalid port '${port}'`);
                continue;
            }
            const ws = exp(path, port, this);
            ws.listen();
            this.webservers.push(ws);
        }
    }
    onunload() {
        this.shutDownServers();
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Static file server settings' });
        let i = 1;
        [...Object.entries(this.plugin.settings.vaultMaps), ['', '']].forEach(([port, path]) => {
            new obsidian.Setting(containerEl)
                .setName(`port #${i}`)
                .setDesc('The port number')
                .addText(text => text
                .setPlaceholder('e.g. 1337')
                .setValue(port)
                .onChange((newPort) => __awaiter(this, void 0, void 0, function* () {
                if (isValidPort(newPort)) {
                    delete this.plugin.settings.vaultMaps[port];
                    port = newPort;
                    this.plugin.settings.vaultMaps[port] = path;
                }
            })));
            new obsidian.Setting(containerEl)
                .setName(`folder #${i}`)
                .setDesc(`The vault folder served for port #${i}`)
                .addText(text => text
                .setPlaceholder('e.g. FolderName')
                .setValue(path)
                .onChange((newPath) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.vaultMaps[port] = newPath;
                path = newPath;
            })));
            i++;
        });
        new obsidian.Setting(containerEl).addButton(button => button.setButtonText('Revert').onClick(() => __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.loadSettings();
            this.plugin.restartServers();
            this.display();
        })));
        new obsidian.Setting(containerEl).addButton(button => button.setButtonText('Apply').onClick(() => __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.saveSettings();
            this.plugin.restartServers();
            this.display();
        })));
    }
}

module.exports = StaticFileServerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
